// Code generated by Kitex v0.9.1. DO NOT EDIT.

package aiorderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	aiorder "github.com/whlxbd/gomall/rpc_gen/kitex_gen/aiorder"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateAIOrder": kitex.NewMethodInfo(
		createAIOrderHandler,
		newCreateAIOrderArgs,
		newCreateAIOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAIOrder": kitex.NewMethodInfo(
		getAIOrderHandler,
		newGetAIOrderArgs,
		newGetAIOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelAIOrder": kitex.NewMethodInfo(
		cancelAIOrderHandler,
		newCancelAIOrderArgs,
		newCancelAIOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	aIOrderServiceServiceInfo                = NewServiceInfo()
	aIOrderServiceServiceInfoForClient       = NewServiceInfoForClient()
	aIOrderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return aIOrderServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return aIOrderServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return aIOrderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AIOrderService"
	handlerType := (*aiorder.AIOrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "aiorder",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createAIOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(aiorder.CreateAIOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(aiorder.AIOrderService).CreateAIOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateAIOrderArgs:
		success, err := handler.(aiorder.AIOrderService).CreateAIOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAIOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateAIOrderArgs() interface{} {
	return &CreateAIOrderArgs{}
}

func newCreateAIOrderResult() interface{} {
	return &CreateAIOrderResult{}
}

type CreateAIOrderArgs struct {
	Req *aiorder.CreateAIOrderReq
}

func (p *CreateAIOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(aiorder.CreateAIOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAIOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAIOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAIOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAIOrderArgs) Unmarshal(in []byte) error {
	msg := new(aiorder.CreateAIOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAIOrderArgs_Req_DEFAULT *aiorder.CreateAIOrderReq

func (p *CreateAIOrderArgs) GetReq() *aiorder.CreateAIOrderReq {
	if !p.IsSetReq() {
		return CreateAIOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAIOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAIOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAIOrderResult struct {
	Success *aiorder.CreateAIOrderResp
}

var CreateAIOrderResult_Success_DEFAULT *aiorder.CreateAIOrderResp

func (p *CreateAIOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(aiorder.CreateAIOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAIOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAIOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAIOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAIOrderResult) Unmarshal(in []byte) error {
	msg := new(aiorder.CreateAIOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAIOrderResult) GetSuccess() *aiorder.CreateAIOrderResp {
	if !p.IsSetSuccess() {
		return CreateAIOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAIOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*aiorder.CreateAIOrderResp)
}

func (p *CreateAIOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAIOrderResult) GetResult() interface{} {
	return p.Success
}

func getAIOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(aiorder.GetAIOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(aiorder.AIOrderService).GetAIOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAIOrderArgs:
		success, err := handler.(aiorder.AIOrderService).GetAIOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAIOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAIOrderArgs() interface{} {
	return &GetAIOrderArgs{}
}

func newGetAIOrderResult() interface{} {
	return &GetAIOrderResult{}
}

type GetAIOrderArgs struct {
	Req *aiorder.GetAIOrderReq
}

func (p *GetAIOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(aiorder.GetAIOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAIOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAIOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAIOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAIOrderArgs) Unmarshal(in []byte) error {
	msg := new(aiorder.GetAIOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAIOrderArgs_Req_DEFAULT *aiorder.GetAIOrderReq

func (p *GetAIOrderArgs) GetReq() *aiorder.GetAIOrderReq {
	if !p.IsSetReq() {
		return GetAIOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAIOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAIOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAIOrderResult struct {
	Success *aiorder.GetAIOrderResp
}

var GetAIOrderResult_Success_DEFAULT *aiorder.GetAIOrderResp

func (p *GetAIOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(aiorder.GetAIOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAIOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAIOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAIOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAIOrderResult) Unmarshal(in []byte) error {
	msg := new(aiorder.GetAIOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAIOrderResult) GetSuccess() *aiorder.GetAIOrderResp {
	if !p.IsSetSuccess() {
		return GetAIOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAIOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*aiorder.GetAIOrderResp)
}

func (p *GetAIOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAIOrderResult) GetResult() interface{} {
	return p.Success
}

func cancelAIOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(aiorder.CancelAIOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(aiorder.AIOrderService).CancelAIOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelAIOrderArgs:
		success, err := handler.(aiorder.AIOrderService).CancelAIOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelAIOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelAIOrderArgs() interface{} {
	return &CancelAIOrderArgs{}
}

func newCancelAIOrderResult() interface{} {
	return &CancelAIOrderResult{}
}

type CancelAIOrderArgs struct {
	Req *aiorder.CancelAIOrderReq
}

func (p *CancelAIOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(aiorder.CancelAIOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelAIOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelAIOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelAIOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelAIOrderArgs) Unmarshal(in []byte) error {
	msg := new(aiorder.CancelAIOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelAIOrderArgs_Req_DEFAULT *aiorder.CancelAIOrderReq

func (p *CancelAIOrderArgs) GetReq() *aiorder.CancelAIOrderReq {
	if !p.IsSetReq() {
		return CancelAIOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelAIOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelAIOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelAIOrderResult struct {
	Success *aiorder.CancelAIOrderResp
}

var CancelAIOrderResult_Success_DEFAULT *aiorder.CancelAIOrderResp

func (p *CancelAIOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(aiorder.CancelAIOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelAIOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelAIOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelAIOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelAIOrderResult) Unmarshal(in []byte) error {
	msg := new(aiorder.CancelAIOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelAIOrderResult) GetSuccess() *aiorder.CancelAIOrderResp {
	if !p.IsSetSuccess() {
		return CancelAIOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelAIOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*aiorder.CancelAIOrderResp)
}

func (p *CancelAIOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelAIOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateAIOrder(ctx context.Context, Req *aiorder.CreateAIOrderReq) (r *aiorder.CreateAIOrderResp, err error) {
	var _args CreateAIOrderArgs
	_args.Req = Req
	var _result CreateAIOrderResult
	if err = p.c.Call(ctx, "CreateAIOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAIOrder(ctx context.Context, Req *aiorder.GetAIOrderReq) (r *aiorder.GetAIOrderResp, err error) {
	var _args GetAIOrderArgs
	_args.Req = Req
	var _result GetAIOrderResult
	if err = p.c.Call(ctx, "GetAIOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelAIOrder(ctx context.Context, Req *aiorder.CancelAIOrderReq) (r *aiorder.CancelAIOrderResp, err error) {
	var _args CancelAIOrderArgs
	_args.Req = Req
	var _result CancelAIOrderResult
	if err = p.c.Call(ctx, "CancelAIOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
