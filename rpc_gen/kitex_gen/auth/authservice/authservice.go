// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	auth "github.com/whlxbd/gomall/rpc_gen/kitex_gen/auth"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DeliverTokenByRPC": kitex.NewMethodInfo(
		deliverTokenByRPCHandler,
		newDeliverTokenByRPCArgs,
		newDeliverTokenByRPCResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"VerifyTokenByRPC": kitex.NewMethodInfo(
		verifyTokenByRPCHandler,
		newVerifyTokenByRPCArgs,
		newVerifyTokenByRPCResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetPayload": kitex.NewMethodInfo(
		getPayloadHandler,
		newGetPayloadArgs,
		newGetPayloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckPermission": kitex.NewMethodInfo(
		checkPermissionHandler,
		newCheckPermissionArgs,
		newCheckPermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckWhite": kitex.NewMethodInfo(
		checkWhiteHandler,
		newCheckWhiteArgs,
		newCheckWhiteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LoadPolicy": kitex.NewMethodInfo(
		loadPolicyHandler,
		newLoadPolicyArgs,
		newLoadPolicyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RemovePolicy": kitex.NewMethodInfo(
		removePolicyHandler,
		newRemovePolicyArgs,
		newRemovePolicyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func deliverTokenByRPCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.DeliverTokenReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).DeliverTokenByRPC(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeliverTokenByRPCArgs:
		success, err := handler.(auth.AuthService).DeliverTokenByRPC(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeliverTokenByRPCResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeliverTokenByRPCArgs() interface{} {
	return &DeliverTokenByRPCArgs{}
}

func newDeliverTokenByRPCResult() interface{} {
	return &DeliverTokenByRPCResult{}
}

type DeliverTokenByRPCArgs struct {
	Req *auth.DeliverTokenReq
}

func (p *DeliverTokenByRPCArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.DeliverTokenReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeliverTokenByRPCArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeliverTokenByRPCArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeliverTokenByRPCArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeliverTokenByRPCArgs) Unmarshal(in []byte) error {
	msg := new(auth.DeliverTokenReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeliverTokenByRPCArgs_Req_DEFAULT *auth.DeliverTokenReq

func (p *DeliverTokenByRPCArgs) GetReq() *auth.DeliverTokenReq {
	if !p.IsSetReq() {
		return DeliverTokenByRPCArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeliverTokenByRPCArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeliverTokenByRPCArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeliverTokenByRPCResult struct {
	Success *auth.DeliveryResp
}

var DeliverTokenByRPCResult_Success_DEFAULT *auth.DeliveryResp

func (p *DeliverTokenByRPCResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.DeliveryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeliverTokenByRPCResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeliverTokenByRPCResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeliverTokenByRPCResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeliverTokenByRPCResult) Unmarshal(in []byte) error {
	msg := new(auth.DeliveryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeliverTokenByRPCResult) GetSuccess() *auth.DeliveryResp {
	if !p.IsSetSuccess() {
		return DeliverTokenByRPCResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeliverTokenByRPCResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.DeliveryResp)
}

func (p *DeliverTokenByRPCResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeliverTokenByRPCResult) GetResult() interface{} {
	return p.Success
}

func verifyTokenByRPCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.VerifyTokenReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).VerifyTokenByRPC(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *VerifyTokenByRPCArgs:
		success, err := handler.(auth.AuthService).VerifyTokenByRPC(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VerifyTokenByRPCResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newVerifyTokenByRPCArgs() interface{} {
	return &VerifyTokenByRPCArgs{}
}

func newVerifyTokenByRPCResult() interface{} {
	return &VerifyTokenByRPCResult{}
}

type VerifyTokenByRPCArgs struct {
	Req *auth.VerifyTokenReq
}

func (p *VerifyTokenByRPCArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.VerifyTokenReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VerifyTokenByRPCArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VerifyTokenByRPCArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VerifyTokenByRPCArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *VerifyTokenByRPCArgs) Unmarshal(in []byte) error {
	msg := new(auth.VerifyTokenReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VerifyTokenByRPCArgs_Req_DEFAULT *auth.VerifyTokenReq

func (p *VerifyTokenByRPCArgs) GetReq() *auth.VerifyTokenReq {
	if !p.IsSetReq() {
		return VerifyTokenByRPCArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VerifyTokenByRPCArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VerifyTokenByRPCArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VerifyTokenByRPCResult struct {
	Success *auth.VerifyResp
}

var VerifyTokenByRPCResult_Success_DEFAULT *auth.VerifyResp

func (p *VerifyTokenByRPCResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.VerifyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VerifyTokenByRPCResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VerifyTokenByRPCResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VerifyTokenByRPCResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *VerifyTokenByRPCResult) Unmarshal(in []byte) error {
	msg := new(auth.VerifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VerifyTokenByRPCResult) GetSuccess() *auth.VerifyResp {
	if !p.IsSetSuccess() {
		return VerifyTokenByRPCResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VerifyTokenByRPCResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.VerifyResp)
}

func (p *VerifyTokenByRPCResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyTokenByRPCResult) GetResult() interface{} {
	return p.Success
}

func getPayloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.GetPayloadReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).GetPayload(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetPayloadArgs:
		success, err := handler.(auth.AuthService).GetPayload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPayloadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetPayloadArgs() interface{} {
	return &GetPayloadArgs{}
}

func newGetPayloadResult() interface{} {
	return &GetPayloadResult{}
}

type GetPayloadArgs struct {
	Req *auth.GetPayloadReq
}

func (p *GetPayloadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.GetPayloadReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPayloadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPayloadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPayloadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPayloadArgs) Unmarshal(in []byte) error {
	msg := new(auth.GetPayloadReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPayloadArgs_Req_DEFAULT *auth.GetPayloadReq

func (p *GetPayloadArgs) GetReq() *auth.GetPayloadReq {
	if !p.IsSetReq() {
		return GetPayloadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPayloadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPayloadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPayloadResult struct {
	Success *auth.GetPayloadResp
}

var GetPayloadResult_Success_DEFAULT *auth.GetPayloadResp

func (p *GetPayloadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.GetPayloadResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPayloadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPayloadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPayloadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPayloadResult) Unmarshal(in []byte) error {
	msg := new(auth.GetPayloadResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPayloadResult) GetSuccess() *auth.GetPayloadResp {
	if !p.IsSetSuccess() {
		return GetPayloadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPayloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.GetPayloadResp)
}

func (p *GetPayloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPayloadResult) GetResult() interface{} {
	return p.Success
}

func checkPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.CheckPermissionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).CheckPermission(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckPermissionArgs:
		success, err := handler.(auth.AuthService).CheckPermission(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckPermissionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckPermissionArgs() interface{} {
	return &CheckPermissionArgs{}
}

func newCheckPermissionResult() interface{} {
	return &CheckPermissionResult{}
}

type CheckPermissionArgs struct {
	Req *auth.CheckPermissionReq
}

func (p *CheckPermissionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.CheckPermissionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckPermissionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckPermissionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckPermissionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckPermissionArgs) Unmarshal(in []byte) error {
	msg := new(auth.CheckPermissionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckPermissionArgs_Req_DEFAULT *auth.CheckPermissionReq

func (p *CheckPermissionArgs) GetReq() *auth.CheckPermissionReq {
	if !p.IsSetReq() {
		return CheckPermissionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckPermissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckPermissionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckPermissionResult struct {
	Success *auth.CheckPermissionResp
}

var CheckPermissionResult_Success_DEFAULT *auth.CheckPermissionResp

func (p *CheckPermissionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.CheckPermissionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckPermissionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckPermissionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckPermissionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckPermissionResult) Unmarshal(in []byte) error {
	msg := new(auth.CheckPermissionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckPermissionResult) GetSuccess() *auth.CheckPermissionResp {
	if !p.IsSetSuccess() {
		return CheckPermissionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckPermissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.CheckPermissionResp)
}

func (p *CheckPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckPermissionResult) GetResult() interface{} {
	return p.Success
}

func checkWhiteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.CheckWhiteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).CheckWhite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckWhiteArgs:
		success, err := handler.(auth.AuthService).CheckWhite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckWhiteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckWhiteArgs() interface{} {
	return &CheckWhiteArgs{}
}

func newCheckWhiteResult() interface{} {
	return &CheckWhiteResult{}
}

type CheckWhiteArgs struct {
	Req *auth.CheckWhiteReq
}

func (p *CheckWhiteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.CheckWhiteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckWhiteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckWhiteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckWhiteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckWhiteArgs) Unmarshal(in []byte) error {
	msg := new(auth.CheckWhiteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckWhiteArgs_Req_DEFAULT *auth.CheckWhiteReq

func (p *CheckWhiteArgs) GetReq() *auth.CheckWhiteReq {
	if !p.IsSetReq() {
		return CheckWhiteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckWhiteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckWhiteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckWhiteResult struct {
	Success *auth.CheckWhiteResp
}

var CheckWhiteResult_Success_DEFAULT *auth.CheckWhiteResp

func (p *CheckWhiteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.CheckWhiteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckWhiteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckWhiteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckWhiteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckWhiteResult) Unmarshal(in []byte) error {
	msg := new(auth.CheckWhiteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckWhiteResult) GetSuccess() *auth.CheckWhiteResp {
	if !p.IsSetSuccess() {
		return CheckWhiteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckWhiteResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.CheckWhiteResp)
}

func (p *CheckWhiteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckWhiteResult) GetResult() interface{} {
	return p.Success
}

func loadPolicyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.LoadPolicyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).LoadPolicy(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoadPolicyArgs:
		success, err := handler.(auth.AuthService).LoadPolicy(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoadPolicyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoadPolicyArgs() interface{} {
	return &LoadPolicyArgs{}
}

func newLoadPolicyResult() interface{} {
	return &LoadPolicyResult{}
}

type LoadPolicyArgs struct {
	Req *auth.LoadPolicyReq
}

func (p *LoadPolicyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.LoadPolicyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoadPolicyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoadPolicyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoadPolicyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoadPolicyArgs) Unmarshal(in []byte) error {
	msg := new(auth.LoadPolicyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoadPolicyArgs_Req_DEFAULT *auth.LoadPolicyReq

func (p *LoadPolicyArgs) GetReq() *auth.LoadPolicyReq {
	if !p.IsSetReq() {
		return LoadPolicyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoadPolicyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoadPolicyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoadPolicyResult struct {
	Success *auth.LoadPolicyResp
}

var LoadPolicyResult_Success_DEFAULT *auth.LoadPolicyResp

func (p *LoadPolicyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.LoadPolicyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoadPolicyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoadPolicyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoadPolicyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoadPolicyResult) Unmarshal(in []byte) error {
	msg := new(auth.LoadPolicyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoadPolicyResult) GetSuccess() *auth.LoadPolicyResp {
	if !p.IsSetSuccess() {
		return LoadPolicyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoadPolicyResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.LoadPolicyResp)
}

func (p *LoadPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoadPolicyResult) GetResult() interface{} {
	return p.Success
}

func removePolicyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.RemovePolicyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).RemovePolicy(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RemovePolicyArgs:
		success, err := handler.(auth.AuthService).RemovePolicy(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RemovePolicyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRemovePolicyArgs() interface{} {
	return &RemovePolicyArgs{}
}

func newRemovePolicyResult() interface{} {
	return &RemovePolicyResult{}
}

type RemovePolicyArgs struct {
	Req *auth.RemovePolicyReq
}

func (p *RemovePolicyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.RemovePolicyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RemovePolicyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RemovePolicyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RemovePolicyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RemovePolicyArgs) Unmarshal(in []byte) error {
	msg := new(auth.RemovePolicyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RemovePolicyArgs_Req_DEFAULT *auth.RemovePolicyReq

func (p *RemovePolicyArgs) GetReq() *auth.RemovePolicyReq {
	if !p.IsSetReq() {
		return RemovePolicyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RemovePolicyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RemovePolicyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RemovePolicyResult struct {
	Success *auth.RemovePolicyResp
}

var RemovePolicyResult_Success_DEFAULT *auth.RemovePolicyResp

func (p *RemovePolicyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.RemovePolicyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RemovePolicyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RemovePolicyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RemovePolicyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RemovePolicyResult) Unmarshal(in []byte) error {
	msg := new(auth.RemovePolicyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RemovePolicyResult) GetSuccess() *auth.RemovePolicyResp {
	if !p.IsSetSuccess() {
		return RemovePolicyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemovePolicyResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.RemovePolicyResp)
}

func (p *RemovePolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemovePolicyResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DeliverTokenByRPC(ctx context.Context, Req *auth.DeliverTokenReq) (r *auth.DeliveryResp, err error) {
	var _args DeliverTokenByRPCArgs
	_args.Req = Req
	var _result DeliverTokenByRPCResult
	if err = p.c.Call(ctx, "DeliverTokenByRPC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyTokenByRPC(ctx context.Context, Req *auth.VerifyTokenReq) (r *auth.VerifyResp, err error) {
	var _args VerifyTokenByRPCArgs
	_args.Req = Req
	var _result VerifyTokenByRPCResult
	if err = p.c.Call(ctx, "VerifyTokenByRPC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPayload(ctx context.Context, Req *auth.GetPayloadReq) (r *auth.GetPayloadResp, err error) {
	var _args GetPayloadArgs
	_args.Req = Req
	var _result GetPayloadResult
	if err = p.c.Call(ctx, "GetPayload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckPermission(ctx context.Context, Req *auth.CheckPermissionReq) (r *auth.CheckPermissionResp, err error) {
	var _args CheckPermissionArgs
	_args.Req = Req
	var _result CheckPermissionResult
	if err = p.c.Call(ctx, "CheckPermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckWhite(ctx context.Context, Req *auth.CheckWhiteReq) (r *auth.CheckWhiteResp, err error) {
	var _args CheckWhiteArgs
	_args.Req = Req
	var _result CheckWhiteResult
	if err = p.c.Call(ctx, "CheckWhite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadPolicy(ctx context.Context, Req *auth.LoadPolicyReq) (r *auth.LoadPolicyResp, err error) {
	var _args LoadPolicyArgs
	_args.Req = Req
	var _result LoadPolicyResult
	if err = p.c.Call(ctx, "LoadPolicy", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemovePolicy(ctx context.Context, Req *auth.RemovePolicyReq) (r *auth.RemovePolicyResp, err error) {
	var _args RemovePolicyArgs
	_args.Req = Req
	var _result RemovePolicyResult
	if err = p.c.Call(ctx, "RemovePolicy", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
