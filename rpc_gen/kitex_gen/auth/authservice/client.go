// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	auth "github.com/whlxbd/gomall/rpc_gen/kitex_gen/auth"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	DeliverTokenByRPC(ctx context.Context, Req *auth.DeliverTokenReq, callOptions ...callopt.Option) (r *auth.DeliveryResp, err error)
	VerifyTokenByRPC(ctx context.Context, Req *auth.VerifyTokenReq, callOptions ...callopt.Option) (r *auth.VerifyResp, err error)
	GetPayload(ctx context.Context, Req *auth.GetPayloadReq, callOptions ...callopt.Option) (r *auth.GetPayloadResp, err error)
	CheckPermission(ctx context.Context, Req *auth.CheckPermissionReq, callOptions ...callopt.Option) (r *auth.CheckPermissionResp, err error)
	CheckWhite(ctx context.Context, Req *auth.CheckWhiteReq, callOptions ...callopt.Option) (r *auth.CheckWhiteResp, err error)
	LoadPolicy(ctx context.Context, Req *auth.LoadPolicyReq, callOptions ...callopt.Option) (r *auth.LoadPolicyResp, err error)
	RemovePolicy(ctx context.Context, Req *auth.RemovePolicyReq, callOptions ...callopt.Option) (r *auth.RemovePolicyResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthServiceClient struct {
	*kClient
}

func (p *kAuthServiceClient) DeliverTokenByRPC(ctx context.Context, Req *auth.DeliverTokenReq, callOptions ...callopt.Option) (r *auth.DeliveryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeliverTokenByRPC(ctx, Req)
}

func (p *kAuthServiceClient) VerifyTokenByRPC(ctx context.Context, Req *auth.VerifyTokenReq, callOptions ...callopt.Option) (r *auth.VerifyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyTokenByRPC(ctx, Req)
}

func (p *kAuthServiceClient) GetPayload(ctx context.Context, Req *auth.GetPayloadReq, callOptions ...callopt.Option) (r *auth.GetPayloadResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPayload(ctx, Req)
}

func (p *kAuthServiceClient) CheckPermission(ctx context.Context, Req *auth.CheckPermissionReq, callOptions ...callopt.Option) (r *auth.CheckPermissionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckPermission(ctx, Req)
}

func (p *kAuthServiceClient) CheckWhite(ctx context.Context, Req *auth.CheckWhiteReq, callOptions ...callopt.Option) (r *auth.CheckWhiteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckWhite(ctx, Req)
}

func (p *kAuthServiceClient) LoadPolicy(ctx context.Context, Req *auth.LoadPolicyReq, callOptions ...callopt.Option) (r *auth.LoadPolicyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoadPolicy(ctx, Req)
}

func (p *kAuthServiceClient) RemovePolicy(ctx context.Context, Req *auth.RemovePolicyReq, callOptions ...callopt.Option) (r *auth.RemovePolicyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemovePolicy(ctx, Req)
}
